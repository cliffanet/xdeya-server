#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Clib::Proc qw|script1 lib|;
use Clib::Const ':utf8';
use Clib::Log 'log_syncd';
use Clib::DB::MySQL 'DB';
use Clib::BinProto;
use Clib::DT;

use IO::Socket;
use IO::Select;
use JSON::XS;
use POSIX qw(WNOHANG);

$SIG{__DIE__} = sub { error('DIE: %s', $_) for @_ };

# Загрузка протокола обмена
my $precv = Clib::BinProto->new(
    '%',
    # Приветствие от устр-ва
    { s => 0x01, code => 'hello',       pk => 'N',      key => 'authid' },
    
    # ожидание join
    { s => 0x12, code => 'joinidle',    pk => 'N',      key => 'timeout' },
    { s => 0x14, code => 'joinfin' },
    
    # приём данных
    { s => 0x21, code => 'datacfg',     pk => 'XCnCCCaaaa',
                                                        key => 'chksum,contrast,timezone,gndmanual,gndauto,dsplautoff,dsplcnp,dsplland,dsplgnd,dsplpwron' },
    { s => 0x22, code => 'datajmp',     pk => 'XN',     key => 'chksum,count' },
    { s => 0x23, code => 'datapntcs',   pk => 'X',      key => 'chksum' },
    { s => 0x24, code => 'datapnt',     pk => 'CCDD',   key => 'num,used,lat,lng' },
    
    { s => 0x31, code => 'datalogbookbeg',pk=>'',       key => '' },
    { s => 0x32, code => 'datalogbook', pk => 'NNT' . ('NnaaiiNNNiiNNC nNNNNNN' x 4), # тут надо поправить - выровнять до NN байт ?
        key => 'num,key,dt,' . join(',',
                        map {
                            my $p=$_.'_';
                            join ',', map { $p.$_ } qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed gpsdage sat
                                batval
                                hAcc vAcc sAcc cAcc
                                millis msave
                            /
                        }
                        qw/toff beg cnp end/) },
    { s => 0x33, code => 'datalogbookend',pk=>'XN',     key => 'chksum,pos' },
    
    { s => 0x34, code => 'datatrackbeg',pk=>'        NNT',
                                                        key => 'jmpnum,jmpkey,dtbeg' },
    { s => 0x35, code => 'datatrack', pk => 'NnaaiiNNNiiNNC nNNNNNN',
                        key => join(',', qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed gpsdage sat
                                batval
                                hAcc vAcc sAcc cAcc
                                millis msave
                            /)
                        },
    { s => 0x36, code => 'datatrackend',pk=>'H',        key => 'chksum' },
    
    { s => 0x3f, code => 'datafin',     pk=>'XXCCCaC   a32',
                                                        key => 'ckswifi,cksver,vern1,vern2,vern3,vtype,hwver,fwupdver' },
    
    { s => 0x4a, code => 'wifiok',      pk=>'X',        key => 'ckswifi' },
    { s => 0x4b, code => 'fwverok',     pk=>'X',        key => 'cksfwver' },
    { s => 0x4c, code => 'fwupdok',     pk=>'',         key => '' },
    
    { s => 0x51, code => 'trklistbeg' },
    { s => 0x52, code => 'trklist',     pk=>'NNNNTNC',  key => 'id,flags,jmpnum,jmpkey,dtbeg,fsize,fnum' },
    { s => 0x53, code => 'trklistend' },
);
my $phello = Clib::BinProto->new(
    '#',
    { s => 0x0f, code => 'bye',         pk => 'N',      key => 'authid' },
    { s => 0x10, code => 'rejoin',      pk => 'N',      key => 'joinnum' },
    { s => 0x20, code => 'accept',      pk => 'XXXXNH', key => 'ckscfg,cksjmp,ckspnt,ckslog,poslog,ckstrack' },
);
my $trk = Clib::BinProto->new(
    '#',
    { s => 0x50, code => 'reqtrksumm',  pk => 'C   N',  key => 'count,fsize' },
    { s => 0x51, code => 'reqtrack',    pk => 'NNNTNC', key => 'id,jmpnum,jmpkey,dtbeg,fnum' },
);
my $pwifi = Clib::BinProto->new(
    '#',
    { s => 0x41, code => 'beg',         pk => '',       key => '' },
    { s => 0x42, code => 'net',         pk => 'ss',     key => 'ssid,pass' },
    { s => 0x43, code => 'end',         pk => '',       key => '' },
);
my $pfwver = Clib::BinProto->new(
    '#',
    { s => 0x44, code => 'beg',         pk => '',       key => '' },
    { s => 0x45, code => 'ver',         pk => 's',      key => 'name' },
    { s => 0x46, code => 'end',         pk => '',       key => '' },
);
my $pfwupd = Clib::BinProto->new(
    '#',
    { s => 0x47, code => 'beg',         pk => '',       key => '' },
    { s => 0x48, code => 'info',        pk => 'Na36',   key => 'size,md5' },
    { s => 0x49, code => 'data',        pk => 'S',      key => 'buf' },
    { s => 0x4a, code => 'end',         pk => '',       key => '' },
);

foreach my $p ($precv, $phello) {
    if ($p->error()) {
        error('[proto] %s', $_) foreach $p->error();
        exit -1;
    }
}

# параметры процесса
Clib::Proc::daemon(
    pidfile => (c('pidPath')||'.').'/syncd.pid',
    procname => 'xdeya-syncd',
    no => c('syncd_nodaemon')
) || exit -1;

# серверный сокет
my $sockSrv = IO::Socket::INET->new(
                    Proto => 'tcp',
                    LocalPort => c('syncd_port'),
                    Listen => 10,
                    TimeOut => 4,
                    Reuse => 1,
                );
if (!$sockSrv) {
    error('Can\'t bind TCP port %s: %s', c('syncd_port'), $@);
    exit -1;
}

# сигнал прерывания процесса
Clib::Proc::sigint(sub {
    $sockSrv->close() if $sockSrv;
    undef $sockSrv;
});

log('Starting bind on port %s', c('syncd_port'));

# Преподготовка для форка
my $f = Clib::Proc->forkinit();
$f->onterm(sub {
    my %p = @_;
    debug('Terminated [%d] %s', $p{pid}, $p{ip});
});

# Основной цикл приёма входящих соединений
while ($sockSrv) {
    my $sock = $sockSrv->accept() || next;
    
    my $ip = $sock->peerhost();
    debug('Connect from %s', $ip);
    
    # Лимит по одновременным соединениям
    if (my $cnt = c('syncd_client_count')) {
        if ($f->chldcnt() >= $cnt) {
            error('client count limit exceed');
            $sock->shutdown(2);
            $sock->close();
            next;
        }
    }
    
    # форкаемся
    my $pid = $f->fork(ip => $ip) || return;
    if ($f->ischld()) {
        Clib::Log->prefix($pid . ' - ' . $ip);
        $0 .= ': '.$ip;
        $sockSrv->close();
        undef $sockSrv;
        
        # клиентский процесс
        cli_recv($sock);
        $sock->shutdown(2);
        $sock->close();
        last;
    }
    else {
        $sock->close();
    }
}

log('Finished');

exit 0;

# =========================================================
# чтение команд (клиентский обработчик)
# =========================================================
my ($sock, $hnd, $shnd);

sub err { error(@_); return; }

sub snd {
    $sock || return;
    my $packer = shift() || return;
    
    # Почему-то, если со стороны устройства соединение завершится
    # раньше намеченного, то соединение не закрывается, хотя
    # с той стороны close() выполняется.
    # И со стороны сервера сокет зависает на команде send()
    my $h = IO::Select->new($sock);
    $h->can_write(10) || return err('send wait timeout');
    
    my $ret = eval { $sock->send($packer->pack(@_)) };
    $ret || return err('Can\'t send: %s', $@||$!);
    1;
}

sub hnd {
    $hnd = shift() if @_;
    return $hnd;
}

sub sadd {
    $shnd || return;
    $shnd->add(@_);
}
sub sremove {
    $shnd || return;
    
    foreach my $s (@_) {
        $shnd->remove($s);
        $s->shutdown(2);
        $s->close();
        if (my $d = (*$s)->{destroy}) {
            $d->();
        }
    }
}
sub sremove_all {
    $shnd || return;
    sremove($shnd->handles());
}
sub sremove_web {
    $sock || return;
    $shnd || return;
    sremove(grep { $_ ne $sock } $shnd->handles());
}

sub cli_recv {
    $sock = shift;
    $shnd = IO::Select->new($sock);
    $hnd = \&hnd_hello; # текущий обработчик команд, он может меняться в процессе

    # сигнал прерывания процесса
    my $run = 1;
    Clib::Proc::sigint(sub { undef $run; });
    
    # приёмник команд
    my $data = ''; # бинарный поток команд
    my @data = (); # распакованный поток команд
    
    (*$sock)->{reader} = sub {
        $data .= $_[0];
        
        # распаковка
        my $p = $precv->unpack($data);
        if (!$p) {
            # ошибка распаковки
            error('proto error: %s', $_) foreach $precv->error();
            error('proto unknown error') if !$precv->error();
            return;
        }
        
        push @data, @$p;
        # Обрабатываем команды
        while (@data) {
            my $d = shift @data;
            my $ok = $hnd->($d);
            $ok || return err('pkt hnd fail on: %s', $d->{code}); # обработчик вернул ошибку
            if (!defined($hnd)) {
                undef $run;
                last;
            }
        }
        
        1;
    };
    
    my $timeout = c('syncd_timeout');
    my $tout = time() + $timeout;
    while ($run && $sock && $shnd && $shnd->handles()) {
        if ($tout < time()) {
            log('client read timeout');
            last;
        }
        
        my @sock = $shnd->can_read(1);
        
        foreach my $s (@sock) {
            $run || last;
            my $buf; #  получение из сокета
            my $r = $s->recv($buf, 1024);
            if (!defined($r)) {
                error('sock recv fail: %s', $!);
                sremove($s);
                next;
            }
            
            my $err = '';
            my $ok = (*$s)->{reader}->($buf, $err);
            if (!$ok) {
                error('sock reader fail: %s', $err) if $err;
                undef $run;
                last;
            }
            
            $tout = time() + $timeout;
        }
    }
    
    sremove_all();
    undef $sock;
    undef $hnd;
    undef $shnd;
}

sub json2data {
    my $json = shift();
    my $data = eval { JSON::XS->new->utf8->decode($json); };
    $data || return err('JSON-decode fail: %s', $@);
    return $data;
}

sub data2json {
    my $data = shift();
    if ((ref($data) ne 'HASH') && (ref($data) ne 'ARRAY')) {
        return err('JSON-encode fail: data is not HASH and is not ARRAY');
    }
    my $json = eval { JSON::XS->new->utf8->pretty(0)->canonical->encode($data); };
    $json || return err('JSON-encode fail: %s', $@);
    return $json;
}

# =========================================================
#  Устройство, объявляется глобально, т.к. нужно в нескольких местах
# =========================================================
my $dev;
my @reqtrack = ();

# =========================================================
#  Приветствие, инициализация
# =========================================================
sub hnd_hello {
    my $d = shift();
    my $lpref = log_prefix('hnd_hello');
    dumper 'recv' => $d;
    
    if ($d->{code} eq 'hello') {
        my $authid = $d->{authid}
            || return do_join($d);
        $dev = sqlGet(device => authid => $authid)
            || return do_join($d);
        dumper dev => $dev;
        
        snd($phello,  accept => $dev );
        hnd(\&hnd_data);
    }
    else {
        return;
    }
    
    1;
}

# Инициализация процедуры подключения устройства веб-порталу
sub do_join {
    my $d = shift();
    
    my $sockjoin = c('sockjoin')
        || return err('Const `sockjoin` not defined');
    
    # Генерация  join-num
    # Проще всего это сделать отсюда, чтобы создать сокет
    # с номером в имени файла. Так вебу будет просто и быстро определить,
    # есть ли такой номер, заодно убедимся в уникальности номера
    my $joinnum;
    my $f;
    
    while (!$f || (-e $f)) {
        $joinnum = rand 0xffff;
        if (!$joinnum || ($joinnum == 0xffff) || ($joinnum == 0xefff)) {
            return err('Can\'t gen join-num');
        }
        $f = sprintf $sockjoin, $joinnum;
    }
    
    # Создаём udp-сокет, который будет только перенаправлять
    # пакеты в устр-во, это надо для отправки кода подтверждения.
    # В случае совпадения номера, устр-во в ответ отправит команду
    # об успешном подтверждении номера
    my $s = 
        IO::Socket::UNIX->new (
            Local   => $f,
            Type    => SOCK_DGRAM,
            ReuseAddr => 1,
        ) || return err('Can\'t create join-sock \'%s\': %s', $f, $!);
    (*$s)->{reader} = sub {
        debug('Recv from udp %d bytes', length($_[0]));
        $sock->send($_[0]);
    };
    
    (*$s)->{destroy} = sub {
        unlink($f) ?
            debug('join-sock removed ok: %s', $f) :
            error('join-sock removed fail \'%s\': %s', $f, $!);
    };
    
    sadd($s);
    
    hnd(\&hnd_join);
    snd($phello,  rejoin => { joinnum => $joinnum } );
    
    1;
}

# =========================================================
#  Подключение устройства к вебу
# =========================================================
sub hnd_join {
    my $d = shift();
    my $lpref = log_prefix('hnd_join');
    
    return 1 if $d->{code} eq 'joinidle';
    
    if ($d->{code} eq 'joinfin') {
        hnd(\&hnd_hello);
        sremove_web();
        debug('join fin');
    }
    else {
        return;
    }
    
    1;
}

# =========================================================
#  Приём данных
# =========================================================
sub hnd_data {
    my $d = shift();
    my $lpref = log_prefix('hnd_data');
    #dumper 'recv' => $d;
    
    if ($d->{code} eq 'datacfg') {
        $d->{chksum} || return err('device return null chksum on `datacfg`');
        sqlUpd(device => $dev->{id}, ckscfg => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datajmp') {
        $d->{chksum} || return err('device return null chksum on `datajmp`');
        sqlUpd(device => $dev->{id}, cksjmp => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datapntcs') {
        $d->{chksum} || return err('device return null chksum on `datapntcs`');
        sqlUpd(device => $dev->{id}, ckspnt => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datalogbookbeg') {
        debug('begin recv hnd_data_logbook');
        hnd(\&hnd_data_logbook);
    }
    
    elsif ($d->{code} eq 'datatrackbeg') {
        debug('begin recv hnd_data_track');
        do_data_track($d);
    }
    
    elsif ($d->{code} eq 'datafin') {
        debug('recv data fin; ckswifi: %s; fwupdver: %s',
                        defined($d->{ckswifi}) ? $d->{ckswifi} : '-undef-',
                        defined($d->{fwupdver}) ? $d->{fwupdver} : '-undef-');
        dumper datafin => $d;
        if ($d->{hwver}) {
            dumper veravail => [firmware_verall(%$d)];
            dumper vercks   => firmware_vercks(%$d);
        }
        $dev->{datafin} = {
            wifi    => !hex($d->{ckswifi}) || !hex($dev->{ckswifi}) || ($d->{ckswifi} ne $dev->{ckswifi}) ? 1 : 0,
            fwver   => $d->{cksver} && ($d->{cksver} ne firmware_vercks(%$d)) ? 1 : 0,
            d       => $d
        };
        
        if (@reqtrack) {
            # Если есть треки, которые надо запросить, то сначала их запрашиваем

            # Отправляем общее количество запрашиваемых треков
            # и их суммарный объём, чтобы можно было на экране рисовать progress
            my $count = @reqtrack;
            my $sz = 0;
            $sz += $_->{fsize} foreach @reqtrack;
            snd($trk,  reqtrksumm => { count => $count, fsize => $sz } ) || return;
            
            return do_reqtrack($d);
        }
        
        return do_datafin($d);
    }
    
    elsif ($d->{code} eq 'trklistbeg') {
        debug('begin recv hnd_track_list');
        return do_trklist($d);
    }
    
    1;
}

sub hnd_data_logbook {
    my $d = shift();
    my $lpref = log_prefix('hnd_data_log');
    
    if ($d->{code} eq 'datalogbook') {
        my @k = keys %$d;
        foreach (@k) {
            /^(toff|beg|cnp|end)_(.+)$/ || next;
            ($d->{$1}||={})->{$2} = delete $d->{$_};
        }
        sqlAdd(
            jump =>
            uid     => $dev->{uid},
            devid   => $dev->{id},
            dtadd   => Clib::DT::now(),
            dt      => $d->{dt},
            num     => $d->{num},
            key     => $d->{key},
            data    => data2json($d),
        ) || return;
    }
    
    elsif ($d->{code} eq 'datalogbookend') {
        $d->{chksum} || return err('device return null chksum on `datalogbookend`');
        sqlUpd(device => $dev->{id}, ckslog => $d->{chksum}, poslog => $d->{pos})
            || return;
        debug('return to hnd_data');
        hnd(\&hnd_data);
    }
    
    else {
        return;
    }
    
    1;
}

sub do_data_track {
    my $dbeg = shift;
    my @track = ();
    
    hnd(sub {
        my $d = shift();
        my $lpref = log_prefix('hnd_data_track');
        
        if ($d->{code} eq 'datatrack') {
            push @track, $d;
        }
    
        elsif ($d->{code} eq 'datatrackend') {
            $d->{chksum} || return err('device return null chksum on `datatrackend`');
            
            sqlAdd(
                track =>
                uid     => $dev->{uid},
                devid   => $dev->{id},
                dtadd   => Clib::DT::now(),
                dtbeg   => $dbeg->{dtbeg},
                jmpnum  => $dbeg->{jmpnum},
                jmpkey  => $dbeg->{jmpkey},
                cks     => $d->{chksum},
                data    => data2json(\@track),
            ) || return;
            
            sqlUpd(device => $dev->{id}, ckstrack => $d->{chksum})
                || return;
            debug('return to hnd_data');
            hnd(\&hnd_data);
        }
    
        else {
            return;
        }
    
        1;
    });
}

sub do_datafin {
    my $f = $dev->{datafin}||{};
    my $d = $f->{d};
    
    if (delete $f->{wifi}) {
        return do_wifi($d);
    }
    elsif (delete $f->{fwver}) {
        return do_fwver($d);
    }
    elsif ($d && (my $fwupdver = delete($d->{fwupdver}))) {
        return do_fwupd($d, $fwupdver);
    }
    else {
        return do_bye(@_);
    }
}

# Получение списка имеющихся на устройстве треков (только заголовки)
sub do_trklist {
    my @track = ();
    
    hnd(sub {
        my $d = shift();
        my $lpref = log_prefix('hnd_trklist');
        
        if ($d->{code} eq 'trklist') {
            $d->{tmbeg} = Clib::DT::totime($d->{dtbeg});
            push @track, $d;
        }
    
        elsif ($d->{code} eq 'trklistend') {
            # Отбираем существующие треки из базы с небольшим запасом
            # На SD-карте не может быть больше 99 треков
            my @db =
                map {
                    # это нужно, чтобы не зависеть от ведущих нулей и пробелов
                    # в mysql-формате времени
                    $_->{tmbeg} = Clib::DT::totime($_->{dtbeg});
                    $_;
                }
                sqlSrch(
                    track =>
                    uid   => $dev->{uid},
                    devid => $dev->{id},
                    sqlColumn(qw/trid dtbeg jmpnum jmpkey cks/),
                    sqlOrder('-id'),
                    sqlLimit(200),
                );
            
            @reqtrack = ();
            foreach my $tr (@track) {
                # Ищем соответствие каждого принятого заголовка трека
                # данным из БД
                my ($db) =
                    grep {
                        (!defined($_->{trid}) || ($_->{trid} == $tr->{id})) &&
                        ($_->{tmbeg}  == $tr->{tmbeg}) &&
                        ($_->{jmpnum} == $tr->{jmpnum}) &&
                        ($_->{jmpkey} == $tr->{jmpkey})
                    }
                    @db;
                next if $db;
                push @reqtrack, $tr;
            }
            
            dumper reqtrack => \@reqtrack;
            
            debug('return to hnd_data');
            hnd(\&hnd_data);
        }
    });
}
# запрос треков из подготовленного в do_trklist списка нужных треков
sub req_trk {
    my $trk = shift @reqtrack;
    $trk || return;
    return snd($trk,  reqtrk => $trk ) || return;
}
sub do_reqtrack {
    my @track = ();
    
    hnd(sub {
        my $d = shift();
        my $lpref = log_prefix('hnd_reqtrack');
        
        # Тут получаем очередной трек (beg,item,end)
        # и на end стартуем очередной трек
        # или переходим в return do_datafin($dev->{datafin}->{d}); 
        
        if ($d->{code} eq 'trackbeg') {
        #    $d->{tmbeg} = Clib::DT::totime($d->{dtbeg});
        #    push @track, $d;
        }
    
        elsif ($d->{code} eq 'trackdata') {
        }
    
        elsif ($d->{code} eq 'trackend') {
        }
    
        else {
            return;
        }
    
        1;
    });
}

sub do_wifi {
    my $d = shift();
    
    debug('send wifi nets');
    
    snd($pwifi,  beg => {} ) || return;
    
    my @wifi = sqlSrch(wifi => uid => $dev->{uid}, devid => $dev->{id});
    foreach my $w (@wifi) {
        snd($pwifi,  net => $w ) || return;
    }
    
    snd($pwifi,  end => {} ) || return;
    
    hnd(\&hnd_aftwifi);
    
    1;
}

sub hnd_aftwifi {
    my $d = shift();
    my $lpref = log_prefix('hnd_aftwifi');
    
    if ($d->{code} eq 'wifiok') {
        sqlUpd(device => $dev->{id}, ckswifi => $d->{ckswifi}) || return;
        debug('wifi ok return to datafin');
        do_datafin($d);
    }
    
    else {
        return;
    }
    
    1;
}

sub do_fwver {
    my $d = shift();
    
    debug('send firmware verall');
    
    snd($pfwver,  beg => {} ) || return;
    
    foreach my $name (firmware_verall(%$d)) {
        snd($pfwver,  ver => { name => $name } ) || return;
    }
    
    snd($pfwver,  end => {} ) || return;
    
    hnd(\&hnd_aftfwver);
    
    1;
}

sub hnd_aftfwver {
    my $d = shift();
    my $lpref = log_prefix('hnd_aftfwver');
    
    if ($d->{code} eq 'fwverok') {
        debug('fwver ok return to datafin');
        do_datafin($d);
    }
    
    else {
        return;
    }
    
    1;
}

sub do_fwupd {
    my ($d, $fwupdver) = @_;
    my $lpref = log_prefix('do_fwupd');
    
    debug('send firmware update: %s', $fwupdver);
    dumper d => $d;
    
    snd($pfwupd,  beg => {} ) || return;
    
    my $bin = firmware_fname(%$d, fwupdver => $fwupdver);
    if (!$bin || !(-f $bin)) {
        error('file not found: %s', $bin);
        snd($pfwupd,  info => { size => 0 } );
        return;
    }
    my $md5 = $bin;
    if ($md5 =~ s/\.bin$/\.md5/) {
        if (open(my $fh, $md5)) {
            $md5 = <$fh>;
            $md5 =~ s/\s+$//;
            close $fh;
            if (!$md5 || ($md5 !~ /^[0-9a-f]{32}$/i)) {
                error('md5 format wrong: %s', $md5);
            }
        }
        else {
            error('can\'t open md5-file: %s', $!);
            undef $md5;
        }
    }
    else {
        error('cant get md5-filename from: %s', $bin);
        undef $md5;
    }
    if (!$md5) {
        snd($pfwupd,  info => { size => 0 } );
        return;
    }
    
    my $fsize = -s $bin;
    my $fh;
    if (!open($fh, $bin)) {
        error('can\'t open bin-file: %s', $!);
        snd($pfwupd,  info => { size => 0 } );
        return;
    }
    
    debug('file: %s; sz: %d; md5: %s (%d)', $bin, $fsize, $md5, length($md5));
    
    snd($pfwupd,  info => { size => $fsize, md5 => $md5 } ) || return;
    
    while (!$fh->eof()) {
        my $buf;
        if (!$fh->read($buf, 512)) {
            error('can\'t read bin-file: %s', $!);
            last;
        }
        snd($pfwupd,  data => { buf => $buf } ) || return;
    }
    close $fh;
    
    snd($pfwupd,  end => {} ) || return;
    
    hnd(\&hnd_aftfwupd);
}

sub hnd_aftfwupd {
    my $d = shift();
    my $lpref = log_prefix('hnd_aftfwupd');
    
    if ($d->{code} eq 'fwupdok') {
        debug('fwupd ok return to datafin');
        do_datafin($d);
    }
    
    else {
        return;
    }
    
    1;
}

sub do_bye {
    my $d = shift();
    
    debug('send bye and terminate');
    
    snd($phello,  bye => {} );
    sqlUpd(device => $dev->{id}, dtlast => Clib::DT::now())
        || return;
    hnd(undef);
    
    1;
}

# =========================================================
#   Работа с прошивками
# =========================================================
sub firmware_versort {
    my ($va, $vb) = @_;
    if (($va !~ /^v/) || ($vb !~ /^v/)) {
        return $_[0] cmp $_[1];
    }
    my @va = split(/\./, $va, 4);
    if (@va != 4) {
        return $_[0] cmp $_[1];
    }
    my @vb = split(/\./, $vb, 4);
    if (@vb != 4) {
        return $_[0] cmp $_[1];
    }
    
    return
        ($va[0] <=> $vb[0]) ||
        ($va[1] <=> $vb[1]) ||
        ($va[2] <=> $vb[2]) ||
        ($va[3] cmp $vb[3]);
}
sub firmware_dir {
    my $dir = c('firmware_dir') || return err('const `firmware_dir` not defined');
    
    if ($dir !~ /^\//) {
        $dir = ROOT() . '/' . $dir;
    }
    
    return $dir;
}
sub firmware_fname {
    my %p = @_;
    
    my $fwupdver = $p{fwupdver} || return err('firmware_fname: no fwupdver');
    
    return err('firmware_fname: fwupdver ver') if $fwupdver !~ /^v?(\d+\.\d+\.\d+)/;
    my $ver = $1;
    
    my $hw = $fwupdver =~ /\.hw(\d+)/ ? $1 : $p{hwver};
    return err('firmware_fname: no hw') if !$hw;
    
    my $type = 
        $fwupdver =~ /\.(dev|debug)/ ? '.'.$1 :
        #$p{vtype} eq 'D' ? '.dev' :
        #$p{vtype} eq 'd' ? '.debug' :
        '';
    
    my $lang = 
        $fwupdver =~ /\.(ru|en)/ ? '.'.$1 : '';
    
    my $dir = firmware_dir() || return;
    
    return $dir . '/' . 'xdeya-altimeter.v' . $ver . '.hw' . $hw . $type . $lang . '.bin';
}
sub firmware_verall {
    my %p = @_;
    
    my $dir = firmware_dir() || return;
    
    my $dh;
    opendir($dh, $dir) || return err('Can\'t open dir \'%s\': %s', $dir, $!);
    
    my @ver = ();
    while (defined(my $fname = readdir $dh)) {
        next if $fname !~ /^xdeya-altimeter\.(v.+)\.bin$/;
        my $ver  = $1;
        next if $ver =~ /\.(partitions|bootloader)$/;
        next if $p{hwver} && (($ver !~ /\.hw(\d+)/) || ($1 != $p{hwver}));
        $ver =~ s/\.hw\d+//;
        push @ver, $ver;
    }
    
    if (($p{vtype} ne 'D') && ($p{vtype} ne 'd')) {
        @ver = grep { !/\.(dev|debug)$/ } @ver;
    }
    
    closedir $dh;
    
    return sort { firmware_versort($b, $a) } @ver;
}
sub firmware_vercks {
    my $s = join("\n", firmware_verall(@_));
    $s .= "\n" if $s;
    my ($cka, $ckb) = (0, 0);
    
    foreach my $ch (split //, $s) {
        my $n = ord($ch);
        $cka += $n;
        $cka = $cka & 0xff;
        $ckb += $cka;
        $ckb = $ckb & 0xff;
    }
    
    my $cks = ($cka << 24) | ($ckb << 16) | length($s);
    return sprintf('%08x', $cks);
}

#==========================================================
#================================================== End ===
#==========================================================
