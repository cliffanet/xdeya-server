#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Clib::Proc qw|script1 lib|;
use Clib::Const ':utf8';
use Clib::Log 'log_syncd';
use Clib::DB::MySQL 'DB';
use Clib::BinProto;
use Clib::DT;

use IO::Socket;
use IO::Select;
use JSON::XS;
use POSIX qw(WNOHANG);

$SIG{__DIE__} = sub { error('DIE: %s', $_) for @_ };

# Загрузка протокола обмена
my $precv = Clib::BinProto->new(
    '%',
    # Приветствие от устр-ва
    { s => 0x01, code => 'hello',       pk => 'N',      key => 'authid' },
    
    # ожидание join
    { s => 0x12, code => 'joinidle',    pk => 'N',      key => 'timeout' },
    { s => 0x14, code => 'joinfin' },
    
    # приём данных
    { s => 0x21, code => 'datacfg',     pk => 'XCnCCCaaaa',
                                                        key => 'chksum,contrast,timezone,gndmanual,gndauto,dsplautoff,dsplcnp,dsplland,dsplgnd,dsplpwron' },
    { s => 0x22, code => 'datajmp',     pk => 'XN',     key => 'chksum,count' },
    { s => 0x23, code => 'datapntcs',   pk => 'X',      key => 'chksum' },
    { s => 0x24, code => 'datapnt',     pk => 'CCDD',   key => 'num,used,lat,lng' },
    
    { s => 0x31, code => 'datalogbookbeg',pk=>'',       key => '' },
    { s => 0x32, code => 'datalogbook', pk => 'NT' . ('NnaaiiNNNiiNC nNNNNt' x 3), # тут надо поправить - выровнять до NN байт ?
        key => 'num,dt,' . join(',',
                        map {
                            my $p=$_.'_';
                            join ',', map { $p.$_ } qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed sat
                                batval
                                hAcc vAcc sAcc cAcc tm
                            /
                        }
                        qw/beg cnp end/) },
    { s => 0x33, code => 'datalogbookend',pk=>'XN',     key => 'chksum,pos' },
    
    { s => 0x34, code => 'datatrackbeg',pk=>'        NT',
                                                        key => 'jmpnum,dtbeg' },
    { s => 0x35, code => 'datatrack', pk => 'NnaaiiNNNiiNC nNNNNt',
                        key => join(',', qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed sat
                                batval
                                hAcc vAcc sAcc cAcc tm
                            /)
                        },
    { s => 0x36, code => 'datatrackend',pk=>'H',        key => 'chksum' },
    
    { s => 0x3f, code => 'datafin',     pk=>'X',        key => 'ckswifi' },
    
    { s => 0x4a, code => 'wifiok',      pk=>'X',        key => 'ckswifi' },
);
my $phello = Clib::BinProto->new(
    '#',
    { s => 0x0f, code => 'bye',         pk => 'N',      key => 'authid' },
    { s => 0x10, code => 'rejoin',      pk => 'N',      key => 'joinnum' },
    { s => 0x20, code => 'accept',      pk => 'XXXXNH', key => 'ckscfg,cksjmp,ckspnt,ckslog,poslog,ckstrack' },
);
my $pwifi = Clib::BinProto->new(
    '#',
    { s => 0x41, code => 'beg',         pk => '',       key => '' },
    { s => 0x42, code => 'net',         pk => 'ss',     key => 'ssid,pass' },
    { s => 0x43, code => 'end',         pk => '',       key => '' },
);

foreach my $p ($precv, $phello) {
    if ($p->error()) {
        error('[proto] %s', $_) foreach $p->error();
        exit -1;
    }
}

# параметры процесса
Clib::Proc::daemon(
    pidfile => (c('pidPath')||'.').'/syncd.pid',
    procname => 'gpstat-syncd',
    no => c('syncd_nodaemon')
) || exit -1;

# серверный сокет
my $sockSrv = IO::Socket::INET->new(
                    Proto => 'tcp',
                    LocalPort => c('syncd_port'),
                    Listen => 10,
                    TimeOut => 4,
                    Reuse => 1,
                );
if (!$sockSrv) {
    error('Can\'t bind TCP port %s: %s', c('syncd_port'), $@);
    exit -1;
}

# сигнал прерывания процесса
Clib::Proc::sigint(sub {
    $sockSrv->close() if $sockSrv;
    undef $sockSrv;
});

log('Starting bind on port %s', c('syncd_port'));

# Преподготовка для форка
my $f = Clib::Proc->forkinit();
$f->onterm(sub {
    my %p = @_;
    debug('Terminated [%d] %s', $p{pid}, $p{ip});
});

# Основной цикл приёма входящих соединений
while ($sockSrv) {
    my $sock = $sockSrv->accept() || next;
    
    my $ip = $sock->peerhost();
    debug('Connect from %s', $ip);
    
    # Лимит по одновременным соединениям
    if (my $cnt = c('syncd_client_count')) {
        if ($f->chldcnt() >= $cnt) {
            error('client count limit exceed');
            $sock->shutdown(2);
            $sock->close();
            next;
        }
    }
    
    # форкаемся
    my $pid = $f->fork(ip => $ip) || return;
    if ($f->ischld()) {
        Clib::Log->prefix($pid . ' - ' . $ip);
        $0 .= ': '.$ip;
        $sockSrv->close();
        undef $sockSrv;
        
        # клиентский процесс
        cli_recv($sock);
        $sock->shutdown(2);
        $sock->close();
        last;
    }
    else {
        $sock->close();
    }
}

log('Finished');

exit 0;

# =========================================================
# чтение команд
# =========================================================

sub err { error(@_); return; }

sub cli_recv {
    my $sock = shift;
    
    my $run = 1;
    # сигнал прерывания процесса
    Clib::Proc::sigint(sub { undef $run; });
    
    my $shnd = IO::Select->new($sock);
    
    # приёмник команд
    my $data = ''; # бинарный поток команд
    my @data = (); # распакованный поток команд
    my $hnd = \&hnd_hello; # текущий обработчик команд, он может меняться в процессе
    
    (*$sock)->{reader} = sub {
        $data .= $_[0];
        
        # распаковка
        my $p = $precv->unpack($data);
        if (!$p) {
            # ошибка распаковки
            error('proto error: %s', $_) foreach $precv->error();
            error('proto unknown error') if !$precv->error();
            return;
        }
        
        push @data, @$p;
        # Обрабатываем команды
        while (@data) {
            my $d = shift @data;
            my $ok = $hnd->($sock, $d, $hnd, $shnd);
            $ok || return err('pkt hnd fail on: %s', $d->{code}); # обработчик вернул ошибку
            if (!defined($hnd)) {
                undef $run;
                last;
            }
        }
        
        1;
    };
    
    my $timeout = c('syncd_timeout');
    my $tout = time() + $timeout;
    while ($run && $sock && $shnd && $shnd->handles()) {
        my @sock = $shnd->can_read(1);
        
        foreach my $s (@sock) {
            $run || last;
            my $buf; #  получение из сокета
            my $r = $s->recv($buf, 1024);
            if (!defined($r)) {
                error('sock recv fail: %s', $!);
                shnd_remove($shnd, $s);
                next;
            }
            
            my $err = '';
            my $ok = (*$s)->{reader}->($buf, $err);
            if (!$ok) {
                error('sock reader fail: %s', $err) if $err;
                undef $run;
                last;
            }
            
            $tout = time() + $timeout;
        }
        
        if ($tout < time()) {
            log('client read timeout');
            last;
        }
    }
    
    shnd_remove($shnd, $shnd->handles());
}

sub shnd_remove {
    my $shnd = shift;
    
    foreach my $s (@_) {
        $shnd->remove($s);
        $s->shutdown(2);
        $s->close();
        if (my $d = (*$s)->{destroy}) {
            $d->();
        }
    }
}

sub json2data {
    my $json = shift();
    my $data = eval { JSON::XS->new->utf8->decode($json); };
    $data || return err('JSON-decode fail: %s', $@);
    return $data;
}

sub data2json {
    my $data = shift();
    if ((ref($data) ne 'HASH') && (ref($data) ne 'ARRAY')) {
        return err('JSON-encode fail: data is not HASH and is not ARRAY');
    }
    my $json = eval { JSON::XS->new->utf8->pretty(0)->canonical->encode($data); };
    $json || return err('JSON-encode fail: %s', $@);
    return $json;
}

# =========================================================
#  Устройство, объявляется глобально, т.к. нужно в нескольких местах
# =========================================================
my $dev;

# =========================================================
#  Приветствие, инициализация
# =========================================================
sub hnd_hello {
    my ($sock, $d) = @_;
    my $lpref = log_prefix('hnd_hello');
    dumper 'recv' => $d;
    
    if ($d->{code} eq 'hello') {
        my $authid = $d->{authid}
            || return do_join(@_);
        $dev = sqlGet(device => authid => $authid)
            || return do_join(@_);
        dumper dev => $dev;
        
        $sock->send($phello->pack( accept => $dev ));
        $_[2] = \&hnd_data;
    }
    else {
        return;
    }
    
    1;
}

# Инициализация процедуры подключения устройства веб-порталу
sub do_join {
    my ($sock, $d, $hnd, $shnd) = @_;
    
    my $sockjoin = c('sockjoin')
        || return err('Const `sockjoin` not defined');
    
    # Генерация  join-num
    # Проще всего это сделать отсюда, чтобы создать сокет
    # с номером в имени файла. Так вебу будет просто и быстро определить,
    # есть ли такой номер, заодно убедимся в уникальности номера
    my $joinnum;
    my $f;
    
    while (!$f || (-e $f)) {
        $joinnum = rand 0xffff;
        if (!$joinnum || ($joinnum == 0xffff) || ($joinnum == 0xefff)) {
            return err('Can\'t gen join-num');
        }
        $f = sprintf $sockjoin, $joinnum;
    }
    
    # Создаём udp-сокет, который будет только перенаправлять
    # пакеты в устр-во, это надо для отправки кода подтверждения.
    # В случае совпадения номера, устр-во в ответ отправит команду
    # об успешном подтверждении номера
    my $s = 
        IO::Socket::UNIX->new (
            Local   => $f,
            Type    => SOCK_DGRAM,
            ReuseAddr => 1,
        ) || return err('Can\'t create join-sock \'%s\': %s', $f, $!);
    (*$s)->{reader} = sub {
        debug('Recv from udp %d bytes', length($_[0]));
        $sock->send($_[0]);
    };
    
    (*$s)->{destroy} = sub {
        unlink($f) ?
            debug('join-sock removed ok: %s', $f) :
            error('join-sock removed fail \'%s\': %s', $f, $!);
    };
    
    $shnd->add($s);
    
    $_[2] = \&hnd_join;
    $sock->send($phello->pack( rejoin => { joinnum => $joinnum } ));
    
    1;
}

# =========================================================
#  Подключение устройства к вебу
# =========================================================
sub hnd_join {
    my ($sock, $d, undef, $shnd) = @_;
    my $lpref = log_prefix('hnd_join');
    
    return 1 if $d->{code} eq 'joinidle';
    
    if ($d->{code} eq 'joinfin') {
        $_[2] = \&hnd_hello;
        shnd_remove($shnd, grep { $_ ne $sock } $shnd->handles());
        debug('join fin');
    }
    else {
        return;
    }
    
    1;
}

# =========================================================
#  Приём данных
# =========================================================
sub hnd_data {
    my ($sock, $d) = @_;
    my $lpref = log_prefix('hnd_data');
    #dumper 'recv' => $d;
    
    if ($d->{code} eq 'datacfg') {
        $d->{chksum} || return err('device return null chksum on `datacfg`');
        sqlUpd(device => $dev->{id}, ckscfg => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datajmp') {
        $d->{chksum} || return err('device return null chksum on `datajmp`');
        sqlUpd(device => $dev->{id}, cksjmp => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datapntcs') {
        $d->{chksum} || return err('device return null chksum on `datapntcs`');
        sqlUpd(device => $dev->{id}, ckspnt => $d->{chksum})
            || return;
    }
    
    elsif ($d->{code} eq 'datalogbookbeg') {
        debug('begin recv hnd_data_logbook');
        $_[2] = \&hnd_data_logbook;
    }
    
    elsif ($d->{code} eq 'datatrackbeg') {
        debug('begin recv hnd_data_track');
        $_[2] = do_data_track(@_);
    }
    
    elsif ($d->{code} eq 'datafin') {
        debug('recv data fin; ckswifi: %s', defined($d->{ckswifi}) ? $d->{ckswifi} : '-undef-');
        if (!hex($d->{ckswifi}) || !hex($dev->{ckswifi}) || ($d->{ckswifi} ne $dev->{ckswifi})) {
            do_wifi(@_);
        }
        else {
            do_bye(@_);
        }
    }
    
    1;
}

sub hnd_data_logbook {
    my ($sock, $d) = @_;
    my $lpref = log_prefix('hnd_data_log');
    
    if ($d->{code} eq 'datalogbook') {
        my @k = keys %$d;
        foreach (@k) {
            /^(beg|cnp|end)_(.+)$/ || next;
            ($d->{$1}||={})->{$2} = delete $d->{$_};
        }
        sqlAdd(
            jump =>
            uid     => $dev->{uid},
            devid   => $dev->{id},
            dtadd   => Clib::DT::now(),
            dt      => $d->{dt},
            num     => $d->{num},
            data    => data2json($d),
        ) || return;
    }
    
    elsif ($d->{code} eq 'datalogbookend') {
        $d->{chksum} || return err('device return null chksum on `datalogbookend`');
        sqlUpd(device => $dev->{id}, ckslog => $d->{chksum}, poslog => $d->{pos})
            || return;
        debug('return to hnd_data');
        $_[2] = \&hnd_data;
    }
    
    else {
        return;
    }
    
    1;
}

sub do_data_track {
    my ($sock, $dbeg) = @_;
    my @track = ();
    return sub {
        my ($sock, $d) = @_;
        my $lpref = log_prefix('hnd_data_track');
        
        if ($d->{code} eq 'datatrack') {
            push @track, $d;
        }
    
        elsif ($d->{code} eq 'datatrackend') {
            $d->{chksum} || return err('device return null chksum on `datatrackend`');
            
            sqlAdd(
                track =>
                uid     => $dev->{uid},
                devid   => $dev->{id},
                dtadd   => Clib::DT::now(),
                dtbeg   => $dbeg->{dtbeg},
                jmpnum  => $dbeg->{jmpnum},
                cks     => $d->{chksum},
                data    => data2json(\@track),
            ) || return;
            
            sqlUpd(device => $dev->{id}, ckstrack => $d->{chksum})
                || return;
            debug('return to hnd_data');
            $_[2] = \&hnd_data;
        }
    };
}

sub do_wifi {
    my ($sock, $d) = @_;
    
    debug('send wifi nets');
    
    $sock->send($pwifi->pack( beg => {} )) || return;
    
    my @wifi = sqlSrch(wifi => uid => $dev->{uid}, devid => $dev->{id});
    foreach my $w (@wifi) {
        $sock->send($pwifi->pack( net => $w )) || return;
    }
    
    $sock->send($pwifi->pack( end => {} )) || return;
    
    $_[2] = \&hnd_aftwifi;
    
    1;
}

sub hnd_aftwifi {
    my ($sock, $d) = @_;
    my $lpref = log_prefix('hnd_aftwifi');
    
    if ($d->{code} eq 'wifiok') {
        sqlUpd(device => $dev->{id}, ckswifi => $d->{ckswifi}) || return;
        debug('wifi ok return to bye');
        do_bye(@_);
    }
    
    else {
        return;
    }
    
    1;
}

sub do_bye {
    my ($sock, $d) = @_;
    
    debug('send bye and terminate');
    
    $sock->send($phello->pack( bye => {} ));
    sqlUpd(device => $dev->{id}, dtlast => Clib::DT::now())
        || return;
    $_[2] = undef;
    
    1;
}

#==========================================================
#================================================== End ===
#==========================================================
